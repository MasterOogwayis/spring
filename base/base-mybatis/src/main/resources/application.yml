server:
  port: 8080

spring:
  main:
    allow-circular-references: true
  application:
    name: base-mybatis
  profiles:
    active: dev
  #  profiles: dev
  datasource:
    url: jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true
#    url: jdbc:mysql://localhost:8066/TESTDB?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true
    username: root
    #    password: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      minimum-idle: 1
      maximum-pool-size: 5
      #      max-lifetime: 30000
      idle-timeout: 600000
      connection-timeout: 30000
      register-mbeans: true

# http://www.mybatis.org/mybatis-3/zh/configuration.html
#默认使用配置
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count=countsql
mybatis:
  # 一些默认的 alias TypeAliasRegistry
  type-aliases-package: com.zsw.persistence.entity,com.zsw.mybatis.typehandler
  type-handlers-package: com.zsw.mybatis.typehandler
  mapper-locations: classpath:mapper/**.xml
  # 看这种配置方式，应该就能推断出静态调用参数设置的方式
  configuration:
    # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存
    # default true
    cache-enabled: true
    # 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
    # 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态
    lazy-loading-enabled: false # default false
    # 当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。
    aggressive-lazy-loading: false # default false 在 3.4.1 之前是true
    # 是否允许单一语句返回多结果集（需要驱动支持）。
    multiple-result-sets-enabled: true # default true
    # 使用列标签代替列名。不同的驱动在这方面会有不同的表现
    # 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果
    use-column-label: true # default true
    # 允许 JDBC 支持自动生成主键，需要驱动支持
    # 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）
    use-generated-keys: false # default false
    # 指定 MyBatis 应如何自动映射列到字段或属性
    # NONE 表示取消自动映射
    # PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集
    # FULL 会自动映射任意复杂的结果集（无论是否嵌套）
    auto-mapping-behavior: PARTIAL # default PARTIAL
    # 配置默认的执行器
    # SIMPLE 就是普通的执行器#
    # REUSE 执行器会重用预处理语句（prepared statements）
    # BATCH 执行器将重用语句并执行批量更新
    default-executor-type: SIMPLE # default SIMPLE
    # 设置超时时间，它决定驱动等待数据库响应的秒数,任意正整数
    #    default-statement-timeout: 1000     # default 未设置 null
    # 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖,任意正整数
    #    default-fetch-size: 1000 # default 未设置 null
    # 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false
    safe-row-bounds-enabled: false # default false
    # 允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false
    safe-result-handler-enabled: true
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射
    map-underscore-to-camel-case: true # default true
    # MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询
    # 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
    # 若设置值为 STATEMENT，本地会话仅用在语句执行上，
    # 对相同 SqlSession 的不同调用将不会共享数据
    local-cache-scope: SESSION # default SESSION
    # 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型
    # 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER
    jdbc-type-for-null: other # default other
    # 指定哪个对象的方法触发一次延迟加载,用逗号分隔的方法列表
    lazy-load-trigger-methods: equals,clone,hashCode,toString
    # 指定动态 SQL 生成的默认语言,一个类型别名或 完全限定类名
    default-scripting-language: org.apache.ibatis.scripting.xmltags.XMLLanguageDriver # default XMLLanguageDriver
    # 指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）,一个类型别名或完全限定类名
    default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler # default
    # 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法
    # 这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的
    call-setters-on-nulls: false # default
    # 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。
    # 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）
    return-instance-for-empty-row: false # default
    # 指定 MyBatis 增加到日志名称的前缀
    log-prefix: ${spring.application.name} # default 未设置
    # 指定 MyBatis 所用日志的具体实现，未指定时将自动查找
    # SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
#    log-core:  # 未设置
    # 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具 CGLIB | JAVASSIST
#    proxy-factory: JAVASSIST # default JAVASSIST （MyBatis 3.3 以上）
    # 指定 VFS 的实现 自定义 VFS 的实现的类全限定名，以逗号分隔
#    vfs-core: org.mybatis.spring.boot.autoconfigure.SpringBootVFS # default 未设置
    # 允许使用方法签名中的名称作为语句参数名称。
    # 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）
#    use-actual-param-name: true
    # 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。
    # 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3） 类型别名或者全类名
#    configuration-factory:  # default 未设置
mybatis-plus:
  mapper-locations: ${mybatis.mapper-locations}
  type-aliases-package: ${mybatis.type-aliases-package}
  type-handlers-package: ${mybatis.type-handlers-package}
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    cache-enabled: false
  global-config:
    db-config:
      id-type: ASSIGN_ID
    worker-id: 1
    datacenter-id: 1



logging:
  level:
    com.zsw.persistence.dao: DEBUG

